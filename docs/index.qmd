# Folder Time Function ----------------------------------------------------

```{r}
# Making the Folder Function: 
FolderTime <- function() {
  dir.create("docs")
  file.create("docs/readme.md")
  writeLines("I EAT SOULS AND BABIES??", "docs/readme.md")
  dir.create("data")
  writeLines("contains data stuff", "data/readme.md")
  dir.create("reports")
  file.create("reports/reports.md")
  writeLines("uncertain what kinds of stuff goes here", "reports/readme.md")
  dir.create("R")
  file.create("project_setup.R")
  writeLines("R is for REBELLION", "R/readme.md")
  
}

FolderTime()
```

```{r}

# Making the Folder Function: 
FolderTime <- function() {
  dir.create("docs")
  file.create("docs/readme.md")
  writeLines("I EAT SOULS AND BABIES??", "docs/readme.md")
  dir.create("data")
  writeLines("contains data stuff", "data/readme.md")
  dir.create("reports")
  file.create("reports/reports.md")
  writeLines("uncertain what kinds of stuff goes here", "reports/readme.md")
  dir.create("R")
  file.create("project_setup.R")
  writeLines("R is for REBELLION", "R/readme.md")
  
}

FolderTime()
```


# Simulating Data ---------------------------------------------------------

```{r}
library(tidyverse)

# Generate sample data
# Sightings of Black Oystercatcher chicks at Santa Cruz beaches
beaches <- c("Cowell's", "Steamer Lane", "Natural Bridges", "Mitchell's", "Main")
# blue, green, black, white, yellow
band_colors <- c("B", "G", "K", "W", "Y") 
# Surveys took place weekly in the summer of 2023
surveys <- seq(as.Date("2023-06-01"), as.Date("2023-08-31"), by = 7)

# Setting the "seed" forces randomized functions (like sample()) to generate
# the same output
set.seed(1538)
# 3 band colors identify a bird. We want 12 birds.
birds <- paste0(
  sample(band_colors, 25, replace = TRUE),
  sample(band_colors, 25, replace = TRUE),
  sample(band_colors, 25, replace = TRUE)
) %>% 
  unique() %>%
  head(12)
bloy_chicks <- tibble(
  # Randomly generate survey data
  beach = sample(beaches, size = 100, replace = TRUE),
  bird = sample(birds, size = 100, replace = TRUE),
  survey = sample(surveys, size = 100, replace = TRUE)
) %>% 
  # Remove duplicates (see ?distinct)
  distinct() %>% 
  # Sort by survey date and location
  arrange(survey, beach)
```

 Q1: We’re randomly generating data, but we’re all going to end up with the same data frames. 
  How is that happening?

  A1: set.seed -- some magic here randomly generates numbers the same for everyone when they use the same set.seed number 


Q2 Explain in plain language what this part does. Your answer should be one or two sentences.

A2: The below code chunk makes a dataframe called "birds" and in it we paste together 3 groups with 25
band color combos and then we keep all those that are unique from each other/no two are the same. Then we look at the first 12. I think we are making our birds...each with a different band..?

```{r}
birds <- paste0(
  sample(band_colors, 25, replace = TRUE),
  sample(band_colors, 25, replace = TRUE),
  sample(band_colors, 25, replace = TRUE)
) %>% 
  unique() %>%
  head(12)
```


Q3: We generated 100 random survey observations. How many rows are in bloy_chicks? Why the difference?

A3: There are 95 rows...because we removed duplicates with the 'distinct() %>%' part


# Without a custom function -----------------------------------------------

We want to estimate where chicks hatched using tidyverse functions. 
Here’s our process:
  
For each bird, where was it seen most often?
If multiple sites are tied, choose the one with the earliest observation
If still tied, randomly choose one
The code below consists of three pipelines (sequences of commands linked by pipes). 
Each pipeline has been shuffled.

Q4 Sort the pipelines back into correct order: 

```{r}
# Find most frequent beach per bird
  beach_freq <- bloy_chicks %>% 
  group_by(bird) %>% 
  count(bird, beach) %>% 
  filter(n == max(n)) %>% 
  ungroup()


# Find first date for each bird+beach
beach_early <- bloy_chicks %>% 
  group_by(bird, beach) %>% 
  summarize(earliest = min(survey),
        .groups = "drop")

# Join the two conditions and retain most frequent beach, only earliest
hatch_beach <- beach_freq %>% 
  left_join(beach_early, by = c("bird", "beach")) %>% 
  filter(earliest == min(earliest)) %>% 
  group_by(bird) %>% 
  sample_n(1) %>% # Randomly choose 1 row. See ?sample_n
  ungroup()

```


# Custom Function ---------------------------------------------------------
 Here’s a different approach using a custom function.

Put the logic for estimating the hatching beach in a single function.
Group the data by bird
Summarize each group using your custom function

This is an example of a split-apply-combine strategy. 
Use group_by() to split our data frame by bird.
  Write a custom function to estimate the hatching beach for that bird. 
  That’s critical: this function works on just one part of the whole! 

Use summarize() to apply our function to each bird and combine the results.

```{r}
# Define the custom function
find_hatching_beach <- function(site, date) {
  bird_observations <- tibble(site, date)
  result <- bird_observations %>% 
    # Perform operations to find the hatching beach (you'll need to fill this part)
    return(result$site)
}

# Group by 'bird' and summarize
result_summary <- bloy_chicks %>%
  group_by(bird) %>%
  summarize(hatching_beach = find_hatching_beach(beach, survey))

bloy_chicks 
```



Q5: The two parameters of find_hatching_beach() are named site and date. 
When this function is called, what columns in bloy_chicks will you use as arguments for these parameters?

A5: site = beach; date = survey
  
 Q6: What will be the value of site when find_hatching_beach() is called 
     on the for bird YWG? How about WYB?

A6: I dunno bro this is beyond me I am barely a human at this point 